print("a" + "b") 
print("a", "b") 

# 방법 1 - % 포맷 연산자 (%d, %s, %c) : 문자열 옆에 `% 값`` 형태로 사용
print("나는 %d살 입니다." % 20) # %d: 정수 - 나는 20살입니다.

print("나는 %s을 좋아해요." % "파이썬") # %s: 문자열(정수,문자 가능) - "나는 파이썬을 좋아해요."
print("나는 %s살 입니다." % 20) # %s: 정수 가능 - 나는 20살입니다.

print("Apple 은 %c로 시작해요." % "A") # %c: 단일문자 - Apple은 A로 시작해요.

print("나는 %s살 입니다." % 20)
print("나는 %s색과 %s색을 좋아해요." % ("파란", "빨간")) # 복수 적용: 문자열 옆 %뒤에 괄호를 통해 문자열 내에 선언한 갯수만큼 나열할 경우 순서대로 매핑

# 방법 2 - 문자열 format 메서드: 문자열 내 {}에 format 메소드에 전달받은 값 할당 - "x{}x".format(20) = "x20x"
print("나는 {}살입니다.".format(20))
print("나는 {}색과 {}색을 좋아해요.".format("파란", "빨간")) # 복수 적용: 문자열 내에 선언한 갯수만큼 format 메소드에 나열할 경우 순서대로 매핑

# 방법 3 - index 할당
print("나는 {1}색과 {0}색을 좋아해요.".format("파란", "빨간")) # 복수 적용: 문자열의 {}에 숫자를 할당할 경우 순서대로 적용

# 방법 4 - key 할당
print("나는 {age}살이며, {color}색을 좋아해요.".format(age=20, color="빨간")) # 복수적용: format 메소드에 변수선언과 동시에 할당 후 문자열의 {}에 변수명을 기입하여 적용
print("나는 {age}살이며, {color}색을 좋아해요.".format(color="빨간", age=20)) # 복수적용: format 메소드에 변수선언과 동시에 할당 후 문자열의 {}에 변수명을 기입하여 적용
age = 50
color = "블랙" 
print("나는 {age}살이며, {color}색을 좋아해요.".format(age=age, color=color)) # 메소드 내 age, color는 변수명이 아니라 key 역할을 하므로 외부 변수를 사용하더라도 값을 할당하듯 직접 매핑해줘야한다.

# 방법 5(v3.6 이상~) - f-string
age = 30
color = "무지개"
print(f"나는 {age}살이며, {color}색을 좋아해요.")